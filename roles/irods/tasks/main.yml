---
# irods/tasks/main.yml

- name: Make dl_dir
  file:
    path: "{{ dl_dir }}"
    state: directory

- name: Install iRODS role prereqs
  apt:
    name={{ item }}
    update_cache=yes
    cache_valid_time=3600
    state=installed
  with_items:
    - git
    - postgresql-9.3
    - python-pika
    - python-psycopg2
    - uuid-dev

- name: Create iRODS users
  user:
    name: "{{ item.name }}"
    password: "{{ item.password | password_hash('sha512') }}"
  with_items:
    - name: "{{ irods_admin_user }}"
      password: "{{ irods_admin_password }}"
    - name: "{{ irods_db_user }}"
      password: "{{ irods_db_password }}"

- name: Start postgresql
  service: name=postgresql state=started
    
- name: Download iRODS packages
  get_url:
    url: "{{ item.url }}"
    checksum: "{{ item.cksum }}"
    dest: "{{ dl_dir }}/{{ item.url | basename }}"
  with_items: "{{ irods_packages }}"
  ignore_errors: true
  register: get_url_status

- name: Install wget, if download failed
  apt:
     name="wget"
     update_cache=yes
     cache_valid_time=3600
     state=installed
  when: get_url_status.changed == false

- name: wget iRODS package, if download failed
  command: wget -N {{ item.url }} -P {{ dl_dir }} 
  with_items: "{{ irods_packages }}"
  when: get_url_status.changed == false

- name: Install iRODS packages
  apt:
    deb: "{{ dl_dir }}/{{ item.url | basename  }}"
    state: installed
  with_items: "{{ irods_packages }}"

- name: add iRODS database
  become_user: postgres
  postgresql_db:
    name: "{{ irods_db_name }}"

- name: add iRODS admin user to postgres
  become_user: postgres
  postgresql_user:
    db: "{{ irods_db_name }}"
    priv: ALL
    name: "{{ irods_db_user }}"
    password: "{{ irods_db_password }}"

- name: copy over reConfile rule files
  template:
    src: "reConfigs/{{ item }}.j2"
    dest: "/var/lib/irods/iRODS/server/config/reConfigs/{{ item }}"
  with_items:
    - ipc-amqp.re
    - ipc-custom.re
    - ipc-env.re
    - ipc-json.re
    - ipc-logic.re
    - ipc-uuid.re

- name: clone Cyverse iRODS repos
  git:
    repo: "{{ item }}"
    dest: "{{ dl_dir }}/{{ item | basename }}"
    version: master
  with_items:
    - "https://github.com/cyverse/irods-setavu-mod"
    - "https://github.com/cyverse/irods-cmd-scripts"

- name: Make iRODS modules directory
  file:
    path: "/var/lib/irods/iRODS/modules/"
    state: directory

- name: install Cyverse setAVU module
  command: "cp -r {{ dl_dir }}/irods-setavu-mod /var/lib/irods/iRODS/modules/setavu"
  args:
    creates: "/var/lib/irods/iRODS/modules/setavu"

- name: install Cyverse command scripts
  command: "cp -r {{ dl_dir }}/irods-cmd-scripts/{{ item }} /var/lib/irods/iRODS/server/bin/cmd/{{ item }}"
  args:
    creates: "/var/lib/irods/iRODS/server/bin/cmd/{{ item }}"
  with_items:
    - "amqptopicsend.py"
    - "generateuuid.sh"

- name: Create iRODS configuration files
  template:
    src: "{{ item }}.j2"
    dest: "{{ dl_dir }}/{{ item }}"
  with_items:
    - setup_icommands
    - setup_irods

- name: Configure iRODS service
  shell: "/var/lib/irods/packaging/setup_irods.sh < {{ dl_dir }}/setup_irods"
  register: irods_config
  ignore_errors: true


- name: Modify configuration file
  shell: "sed '1,2d' {{ dl_dir }}/setup_irods > {{ dl_dir }}/setup_irods_mod"
  #if irods_config fails, a comment saying "must be exactly 32 bytes" is printed, so key off of the word "exactly"
  when: irods_config.stdout.find("exactly") != -1

- name: Re-configure iRODS service
  shell: "/var/lib/irods/packaging/setup_irods.sh < {{ dl_dir }}/setup_irods_mod"
  register: irods_reconfig
  ignore_errors: true
  when: irods_config.stdout.find("exactly") != -1

- name: Configure iCommands for administration
  when:
  command: "iinit < {{ dl_dir }}/setup_irods"
